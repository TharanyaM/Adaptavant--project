package com.project.in.controllers;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.ParseException;
import java.util.List;

import javax.jdo.PersistenceManager;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.datanucleus.api.jdo.exceptions.ClassNotPersistenceCapableException;
import org.json.simple.parser.JSONParser;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import javax.jdo.*;
import com.google.appengine.labs.repackaged.org.json.JSONObject;
import com.google.gson.Gson;
import com.project.in.PMF;
import com.project.in.models.*;

@Controller
public class RegistrationServlet {

	@RequestMapping(value="/signup",method = RequestMethod.GET)
	public String signup()
	{
		return "signup";
		
	}
	
	
	@RequestMapping(value="/oauth", method = RequestMethod.GET)
	public ModelAndView helloWorld(@RequestParam("code") String code,
			HttpServletRequest req, HttpServletResponse res)
			throws IOException, ParseException, java.text.ParseException,
			ClassNotPersistenceCapableException, ServletException {

		String param1 = "value1";
		String param2 = "value2";

		// for get authorization code
		String query = String.format("param1=%s&param2=%s",
				URLEncoder.encode(param1, "UTF-8"),
				URLEncoder.encode(param2, "UTF-8"));
		String redirect_url = "http://localhost:8888/oauth";
		String clientId = "482631779289-nogvfvhsce52astjajqnh526ia4a75e0.apps.googleusercontent.com";
		String clientSecret = "eHfeqw_GLcdD4ILqI-qGBQzZ";

		String grant_type = "authorization_code";
		// for get token_access
		URLConnection connection = new URL(
				"https://www.googleapis.com/oauth2/v3/token?client_id="
						+ clientId + "&client_secret=" + clientSecret
						+ "&redirect_uri=" + redirect_url + "&grant_type="
						+ grant_type + "&code=" + code).openConnection();
		connection.setDoOutput(true); // Triggers POST.
		// connection.setRequestProperty("Accept-Charset", "UTF-8");
		connection.setRequestProperty("Content-Type",
				"application/x-www-form-urlencoded;charset=");
		String charset = "UTF-8";
		try (OutputStream output = connection.getOutputStream()) {
			output.write(query.getBytes(charset));
		}

		InputStream response = connection.getInputStream();
		System.out.println(response);
		StringBuilder str = new StringBuilder();
		Gson gson = new Gson();
		String pro = null;
		for (int c1 = response.read(); c1 != -1; c1 = response.read()) {
			char j = (char) c1;
			str.append((char) j);

		}
		String s = new String(str);
		JSONObject json = (JSONObject) new JSONParser().parse(s);
		String access_token = json.get("access_token").toString();
		System.out.println(json.get("access_token"));

		response.close();

		// for get user info
		URLConnection conn = new URL(
				"https://www.googleapis.com/oauth2/v3/userinfo?access_token="
						+ access_token).openConnection();
		conn.setDoOutput(true); // Triggers POST.
		// connection.setRequestProperty("Accept-Charset", "UTF-8");
		conn.setRequestProperty("Content-Type",
				"application/x-www-form-urlencoded;charset=");

		try (OutputStream output1 = conn.getOutputStream()) {
			output1.write(query.getBytes(charset));
		}
		StringBuilder str1 = new StringBuilder();
		InputStream resp = conn.getInputStream();
		for (int c = resp.read(); c != -1; c = resp.read()) {
			char j = (char) c;
			str1.append((char) j);

		}
		String userInfo = new String(str1);
		System.out.println(str1);
		JSONObject j = (JSONObject) new JSONParser().parse(userInfo);
		System.out.println(j.get("picture"));
		String userEmail = (String) j.get("email");
		System.out.println(userEmail);
		String pic = (String) j.get("picture");
		PersistenceManager pm = PMF.get().getPersistenceManager();
		String uEmail = req.getParameter("email");
		List<User> result = null;
		javax.jdo.Query q1 = pm.newQuery(User.class);
		q1.setFilter("email =='" + uEmail + "'");
		result = (List<User>) q1.execute();
		System.out.println("" + result);
		if (!result.isEmpty()) {

			Iterator<User> iter = result.iterator();
			while (iter.hasNext()) {
				User currentUser = (User) iter.next();
				System.out.println(currentUser.getEmail());
				System.out.println(currentUser.getListDetail());

				ArrayList<ListDetail> list = (ArrayList<ListDetail>) currentClient
						.getListDetail();
				Iterator<ListDetail> iter1 = list.iterator();
				System.out.println("--------------------");
				System.out.println(currentClient.listdetail);
				while (iter1.hasNext()) {
					ListDetail current = (ListDetail) iter1.next();
					ArrayList<ToDO> list1 = (ArrayList<ToDO>) current.getToDO();
					Iterator<ToDO> it1 = list1.iterator();

					System.out.println(current.getEmail());
					while (it1.hasNext()) {
						ToDO curr = (ToDO) it1.next();
						System.out.println("------------------");
						System.out.println(curr.getEmail());
						System.out.println("------------------");
					}
				}
			}
		} else {
			System.out.println("---------------------");
			Client client = new Client();
	

			TimeZone.setDefault(TimeZone.getTimeZone("GMT"));
			Calendar cal = Calendar.getInstance(TimeZone.getDefault());
			Date date = cal.getTime();
			client.setDate(date);
			client.setEmail(userEmail);
			client.setPicture(pic);
			

			ListDetail list = new ListDetail();
			list.setListDetail("Important");
			ToDO todo = new ToDO();
			todo.setEmail("tharanya21@gmail.com");
			todo.setDate(date);
			ToDO todo1 = new ToDO();
			todo1.setEmail("tamil35@gmail.com");
			todo1.setDate(date);
			ToDO todo2 = new ToDO();
			todo2.setEmail("subak332@gmail.com");
			todo2.setDate(date);
			ArrayList<ToDO> todoemail = new ArrayList<ToDO>();
			todoemail.add(todo);
			todoemail.add(todo1);
			todoemail.add(todo2);
			list.setToDO(todoemail);

			ListDetail list1 = new ListDetail();
			list1.setListDetail("Started");
			ToDO todo3 = new ToDO();
			todo3.setEmail("tharanya21@gmail.com");
			todo3.setDate(date);
			ToDO todo4 = new ToDO();
			todo4.setEmail("tamil35@gmail.com");
			todo4.setDate(date);
			ToDO todo5 = new ToDO();
			todo5.setEmail("subak332@gmail.com");
			todo5.setDate(date);
			ArrayList<ToDO> todoemail1 = new ArrayList<ToDO>();
			todoemail1.add(todo3);
			todoemail1.add(todo4);
			todoemail1.add(todo5);
			list1.setToDO(todoemail1);

			ListDetail list2 = new ListDetail();
			list2.setListDetail("If i have time");
			ToDO todo6 = new ToDO();
			todo6.setEmail("tharanya21@gmail.com");
			todo6.setDate(date);
			ToDO todo7 = new ToDO();
			todo7.setEmail("tamil35@gmail.com");
			todo7.setDate(date);
			ToDO todo8 = new ToDO();
			todo8.setEmail("subak332@gmail.com");
			todo8.setDate(date);
			ArrayList<ToDO> todoemail2 = new ArrayList<ToDO>();
			todoemail2.add(todo6);
			todoemail2.add(todo7);
			todoemail2.add(todo8);

			list2.setToDO(todoemail2);
			ArrayList<ListDetail> listdetail = new ArrayList<ListDetail>();
			listdetail.add(list);
			listdetail.add(list1);
			listdetail.add(list2);
			client.setListDetail(listdetail);

			pm.makePersistent(client);

			req.getRequestDispatcher("/process1").include(req, res);

		}

		pm.close();*/
		return new ModelAndView("pro", "client", pro);

	}
		
}
